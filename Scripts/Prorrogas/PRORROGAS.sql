--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-------------------------------PRORROGAS----------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------


--REQF001 –  Creación Solicitud Prórroga
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_CREA_SOL_PRO
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_NOPRCN	NUMERIC (10, 0),
	IN PARAM_NWRRNT	NUMERIC (10, 0),
	IN PARAM_FPRRGA	NUMERIC (8,0),
	IN PARAM_ISLDCL	NUMERIC ( 15,5 ),
	IN PARAM_ISLDMR	NUMERIC ( 15,5 ),
	IN PARAM_SSTSLP	CHAR (1),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_USRCRT	CHAR (10),
	IN PARAM_NTRMCR	CHAR  (10),
	IN PARAM_NENDS	NUMERIC (10, 0)  ,
	IN PARAM_FENDS	NUMERIC (8,0)  ,
	IN PARAM_FULTAC NUMERIC(8,0),
	IN PARAM_HULTAC NUMERIC(6,0),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG

	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_NOPRCN,0)=0 OR
		IFNULL(PARAM_NWRRNT,0)=0 OR
		IFNULL(PARAM_FPRRGA,0)=0 OR
		IFNULL(PARAM_ISLDCL,0)=0 OR
		IFNULL(PARAM_ISLDMR,0)=0 OR
		IFNULL(PARAM_SSTSLP,'')='' OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_USRCRT,'')='' OR
		IFNULL(PARAM_NTRMCR,'')=''		
	THEN 
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor,';
	END IF;
	
--	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
--		SET VAL=VAL+1;
--		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos,';	
--	END IF;

	IF PARAM_SSTSLP <>'P' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Situación solicitud prórroga, no válido, ';
	END IF;
	
	IF PARAM_SESTRG <> 'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Estado del Registro , no válido, ';	
	END IF;
	
	IF PARAM_USRCRT NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario de creación no válido, ';
	END IF;

	IF  PARAM_NTRMCR NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal de creación no válido,';
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF NOT EXISTS (SELECT * FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				INSERT INTO DC@ALMAPER.ZZWW21
				(
					NSLCPR, NENDS, NOPRCN, NWRRNT, FENDS, FPRRGA, ISLDCL, ISLDMR, 
					SSTSLP, SESTRG, FULTAC, HULTAC, CULUSA, NTRMNL, FCHCRT, HRACRT, 
					USRCRT, NTRMCR
				)
				VALUES
				(
					PARAM_NSLCPR, PARAM_NENDS, PARAM_NOPRCN, PARAM_NWRRNT, PARAM_FENDS, PARAM_FPRRGA, PARAM_ISLDCL, PARAM_ISLDMR, 
					PARAM_SSTSLP, PARAM_SESTRG, PARAM_FULTAC, PARAM_HULTAC, PARAM_CULUSA, PARAM_NTRMNL, DC@RNSLIB.FECHA(), DC@RNSLIB.HORA(),
					PARAM_USRCRT, PARAM_NTRMCR
				);
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF NOT EXISTS (SELECT * FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				INSERT INTO DC@RNSLIB.ZZWW21
				(
					NSLCPR, NENDS, NOPRCN, NWRRNT, FENDS, FPRRGA, ISLDCL, ISLDMR, 
					SSTSLP, SESTRG, FULTAC, HULTAC, CULUSA, NTRMNL, FCHCRT, HRACRT, 
					USRCRT, NTRMCR
				)
				VALUES
				(
					PARAM_NSLCPR, PARAM_NENDS, PARAM_NOPRCN, PARAM_NWRRNT, PARAM_FENDS, PARAM_FPRRGA, PARAM_ISLDCL, PARAM_ISLDMR, 
					PARAM_SSTSLP, PARAM_SESTRG, PARAM_FULTAC, PARAM_HULTAC, PARAM_CULUSA, PARAM_NTRMNL, DC@RNSLIB.FECHA(), DC@RNSLIB.HORA(),
					PARAM_USRCRT, PARAM_NTRMCR
				);
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
		
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;


	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NOPRCN : ' CONCAT CAST(PARAM_NOPRCN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NWRRNT : ' CONCAT CAST(PARAM_NWRRNT  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_FPRRGA : ' CONCAT CAST(PARAM_FPRRGA  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_ISLDCL : ' CONCAT CAST(PARAM_ISLDCL  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_ISLDMR : ' CONCAT CAST(PARAM_ISLDMR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SSTSLP : ' CONCAT PARAM_SSTSLP  CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_USRCRT : ' CONCAT PARAM_USRCRT  CONCAT ' | ' CONCAT
					'PARAM_NTRMCR : ' CONCAT PARAM_NTRMCR  CONCAT ' | ' CONCAT
					'PARAM_NENDS : ' CONCAT CAST(PARAM_NENDS  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_FENDS : ' CONCAT CAST(PARAM_FENDS  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_FULTAC : ' CONCAT CAST(PARAM_FULTAC  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_HULTAC : ' CONCAT CAST(PARAM_HULTAC  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_CREA_SOL_PRO',
	pParametros,
	pRespuesta
	);	

END
GO

--4.1.2	REQF002 – Modificación de Solicitud de Prórroga 
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_MOD_SOL_PRO
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_FPRRGA	NUMERIC (8,0),
	IN PARAM_ISLDCL	NUMERIC ( 15,5 ),
	IN PARAM_ISLDMR	NUMERIC ( 15,5 ),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN

	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF 
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_FPRRGA,0)=0 OR
		IFNULL(PARAM_ISLDCL,0)=0 OR
		IFNULL(PARAM_ISLDMR,0)=0 OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor,';
	END IF;

	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos,';	
	END IF;
	
	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@ALMAPER.ZZWW21
				SET
					FPRRGA = PARAM_FPRRGA, 
					ISLDCL = PARAM_ISLDCL, 
					ISLDMR = PARAM_ISLDMR, 
					FULTAC = DC@RNSLIB.FECHA(), 
					HULTAC = DC@RNSLIB.HORA(), 
					CULUSA = PARAM_CULUSA, 
					NTRMNL = PARAM_NTRMNL					
				WHERE NSLCPR=PARAM_NSLCPR;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@RNSLIB.ZZWW21
				SET
					FPRRGA = PARAM_FPRRGA, 
					ISLDCL = PARAM_ISLDCL, 
					ISLDMR = PARAM_ISLDMR, 
					FULTAC = DC@RNSLIB.FECHA(), 
					HULTAC = DC@RNSLIB.HORA(), 
					CULUSA = PARAM_CULUSA, 
					NTRMNL = PARAM_NTRMNL					
				WHERE NSLCPR=PARAM_NSLCPR;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
		
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;

	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_FPRRGA : ' CONCAT CAST(PARAM_FPRRGA  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_ISLDCL : ' CONCAT CAST(PARAM_ISLDCL  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_ISLDMR : ' CONCAT CAST(PARAM_ISLDMR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_MOD_SOL_PRO',
	pParametros,
	pRespuesta
	);	

END
GO
--4.1.3	REQF003 – Anulación de Solicitud Prórroga
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ANL_SOL_PRO
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_SSTSLP	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)		
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG

	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_SSTSLP,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor,';
	END IF;

	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos,';	
	END IF;
	
	IF PARAM_SESTRG<>'*' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';	
	END IF;
	
	IF PARAM_SSTSLP<>'*' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag situación solicitud prórroga no válido, ';	
	END IF;

	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@ALMAPER.ZZWW21
				SET
					SESTRG =PARAM_SESTRG, 
					SSTSLP =PARAM_SSTSLP,
					FULTAC =DC@RNSLIB.FECHA(), 
					HULTAC =DC@RNSLIB.HORA(), 
					CULUSA =PARAM_CULUSA, 
					NTRMNL =PARAM_NTRMNL					
				WHERE NSLCPR=PARAM_NSLCPR;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro anulado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@RNSLIB.ZZWW21
				SET
					SESTRG =PARAM_SESTRG, 
					SSTSLP =PARAM_SSTSLP,
					FULTAC =DC@RNSLIB.FECHA(), 
					HULTAC =DC@RNSLIB.HORA(), 
					CULUSA =PARAM_CULUSA, 
					NTRMNL =PARAM_NTRMNL					
				WHERE NSLCPR=PARAM_NSLCPR;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro anulado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;

	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_SSTSLP : ' CONCAT PARAM_SSTSLP  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_ANL_SOL_PRO',
	pParametros,
	pRespuesta
	);	
	

END
GO

--4.1.4	REQF004 – Enviar la solicitud de prórroga
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ENV_SOL_PRO
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_SSTSLP	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF 
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_SSTSLP,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;

	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_SSTSLP<>'S' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Situación Solicitud Prorroga no válido, ';	
	END IF;

	IF PARAM_SESTRG<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';	
	END IF;
	
	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;

	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@ALMAPER.ZZWW21
				SET
					SESTRG =PARAM_SESTRG ,
					SSTSLP =PARAM_SSTSLP ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;	
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@RNSLIB.ZZWW21
				SET
					SESTRG =PARAM_SESTRG ,
					SSTSLP =PARAM_SSTSLP ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;	
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;

	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_SSTSLP : ' CONCAT PARAM_SSTSLP  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_ENV_SOL_PRO',
	pParametros,
	pRespuesta
	);	

END
GO

--4.1.5	REQF005 – Recepción de la solicitud de prórroga
--SOLICITUDES DE PRÓRROGA  
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_RCP_SOL_PRO_SOL
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_SSTSLP	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF 
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_SSTSLP,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;
	
	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_SSTSLP<>'I' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Situación Solicitud Prorroga no válido, ';	
	END IF;

	IF PARAM_SESTRG<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';	
	END IF;

	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@ALMAPER.ZZWW21
				SET
					SESTRG = PARAM_SESTRG,
					SSTSLP = PARAM_SSTSLP,
					FULTAC = DC@RNSLIB.FECHA(),
					HULTAC = DC@RNSLIB.HORA(),
					CULUSA = PARAM_CULUSA,
					NTRMNL = PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@RNSLIB.ZZWW21
				SET
					SESTRG = PARAM_SESTRG,
					SSTSLP = PARAM_SSTSLP,
					FULTAC = DC@RNSLIB.FECHA(),
					HULTAC = DC@RNSLIB.HORA(),
					CULUSA = PARAM_CULUSA,
					NTRMNL = PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;
	
	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_SSTSLP : ' CONCAT PARAM_SSTSLP  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_RCP_SOL_PRO_SOL',
	pParametros,
	pRespuesta
	);	

END
GO

--FIRMAS POR PRÓRROGA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_RCP_SOL_PRO_FRM
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_NOPRCN	NUMERIC (10, 0),
	IN PARAM_NWRRNT	NUMERIC (10, 0),
	IN PARAM_CCLNT	NUMERIC (6,0),
	IN PARAM_CBNCFN	NUMERIC (4,0),
	IN PARAM_NFRMAL	NUMERIC (2,0 ),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	IN PARAM_NENDS	NUMERIC (6,0) ,
	IN PARAM_SFRMAL	CHAR (1) ,
	IN PARAM_SFRMBN	CHAR (1),
	IN PARAM_SFRMCL	CHAR (1),
	IN PARAM_NFRRAL	NUMERIC (2,0),
	IN PARAM_NFRRBN	NUMERIC (2,0),
	IN PARAM_NFRMBN	NUMERIC (2,0),
	IN PARAM_NFRRCL	NUMERIC (2,0),
	IN PARAM_NFRMCL	NUMERIC (2,0),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_NOPRCN,0)=0 OR
		IFNULL(PARAM_NWRRNT,0)=0 OR
		IFNULL(PARAM_CCLNT	,0)=0 OR
		IFNULL(PARAM_CBNCFN,0)=0 OR
		IFNULL(PARAM_NFRMAL,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;
	
	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_NFRMAL<>2 THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Numero Firmas de Almacenera no válido, ';		
	END IF;

	IF PARAM_SESTRG<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';	
	END IF;
	
	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF NOT EXISTS (SELECT * FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				INSERT INTO DC@ALMAPER.ZZWT95
				(
					NSLCPR, NOPRCN, NWRRNT, NENDS, CCLNT, CBNCFN, SFRMAL, SFRMBN,
					SFRMCL, NFRRAL, NFRMAL, NFRRBN, NFRMBN, NFRRCL, NFRMCL, SESTRG,
					FULTAC, HULTAC, CULUSA, NTRMNL
				)
				VALUES
				(
					PARAM_NSLCPR, PARAM_NOPRCN, PARAM_NWRRNT, PARAM_NENDS, PARAM_CCLNT, PARAM_CBNCFN, PARAM_SFRMAL, PARAM_SFRMBN,
					PARAM_SFRMCL, PARAM_NFRRAL, PARAM_NFRMAL, PARAM_NFRRBN, PARAM_NFRMBN, PARAM_NFRRCL, PARAM_NFRMCL, PARAM_SESTRG,
					DC@RNSLIB.FECHA(), DC@RNSLIB.HORA(), PARAM_CULUSA, PARAM_NTRMNL
				);
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF NOT EXISTS (SELECT * FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				INSERT INTO DC@RNSLIB.ZZWT95
				(
					NSLCPR, NOPRCN, NWRRNT, NENDS, CCLNT, CBNCFN, SFRMAL, SFRMBN,
					SFRMCL, NFRRAL, NFRMAL, NFRRBN, NFRMBN, NFRRCL, NFRMCL, SESTRG,
					FULTAC, HULTAC, CULUSA, NTRMNL
				)
				VALUES
				(
					PARAM_NSLCPR, PARAM_NOPRCN, PARAM_NWRRNT, PARAM_NENDS, PARAM_CCLNT, PARAM_CBNCFN, PARAM_SFRMAL, PARAM_SFRMBN,
					PARAM_SFRMCL, PARAM_NFRRAL, PARAM_NFRMAL, PARAM_NFRRBN, PARAM_NFRMBN, PARAM_NFRRCL, PARAM_NFRMCL, PARAM_SESTRG,
					DC@RNSLIB.FECHA(), DC@RNSLIB.HORA(), PARAM_CULUSA, PARAM_NTRMNL
				);
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;

	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NOPRCN : ' CONCAT CAST(PARAM_NOPRCN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NWRRNT : ' CONCAT CAST(PARAM_NWRRNT  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CCLNT : ' CONCAT CAST(PARAM_CCLNT  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CBNCFN : ' CONCAT CAST(PARAM_CBNCFN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NFRMAL : ' CONCAT CAST(PARAM_NFRMAL  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL  CONCAT ' | ' CONCAT
					'PARAM_NENDS : ' CONCAT CAST(PARAM_NENDS  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SFRMAL : ' CONCAT PARAM_SFRMAL  CONCAT ' | ' CONCAT
					'PARAM_SFRMBN : ' CONCAT PARAM_SFRMBN  CONCAT ' | ' CONCAT
					'PARAM_SFRMCL : ' CONCAT PARAM_SFRMCL  CONCAT ' | ' CONCAT
					'PARAM_NFRRAL : ' CONCAT CAST(PARAM_NFRRAL  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NFRRBN : ' CONCAT CAST(PARAM_NFRRBN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NFRMBN : ' CONCAT CAST(PARAM_NFRMBN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NFRRCL : ' CONCAT CAST(PARAM_NFRRCL  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NFRMCL : ' CONCAT CAST(PARAM_NFRMCL  AS VARCHAR(2000))
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_RCP_SOL_PRO_FRM',
	pParametros,
	pRespuesta
	);	

END
GO

--4.1.6	REQF006 –  Registro firma prórroga depositante
--REPRESENTANTES POR SOLICITUD DE PRÓRROGA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_DEP_REPRE
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_STPENT	NUMERIC (5,0),
	IN PARAM_CENTD	NUMERIC (6,0),
	IN PARAM_CRPRS	CHAR (5),
	IN PARAM_NOPRCN	NUMERIC (10, 0),
	IN PARAM_NWRRNT	NUMERIC (10, 0),
	IN PARAM_SFRMRP	CHAR (1),
	IN PARAM_FFRMRP	NUMERIC (8,0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF 
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_STPENT,0)=0 OR
		IFNULL(PARAM_CENTD	,0)=0 OR
		IFNULL(PARAM_CRPRS	,'')='' OR
		IFNULL(PARAM_NOPRCN,0)=0 OR
		IFNULL(PARAM_NWRRNT,0)=0 OR
		IFNULL(PARAM_SFRMRP,'')='' OR
		IFNULL(PARAM_FFRMRP,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')='' 
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;
	
	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_STPENT<>'C' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Tipo de Entidad no válido, ';	
	END IF;
	
	IF PARAM_CRPRS NOT BETWEEN '00' AND '99999' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código representante no válido, ';		
	END IF;
	
	IF PARAM_SFRMRP<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag firma del representante no válido, ';		
	END IF;
	
	IF PARAM_SESTRG<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';	
	END IF;
	
	IF LENGTH(CAST(PARAM_FFRMRP AS VARCHAR(8)))<>8  OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),1,4) AS INTEGER)<=1900 OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),5,2) AS INTEGER)>12 OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),7,2) AS INTEGER)>31 OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),7,2) AS INTEGER)=0 THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Formato de fecha no válida,';		
	END IF;
	
	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF NOT EXISTS (SELECT * FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR=PARAM_NSLCPR AND STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS) THEN
			
				INSERT INTO DC@ALMAPER.ZZWT94
				(
					NSLCPR, STPENT, CENTD, CRPRS, NOPRCN, NWRRNT, SFRMRP,  FFRMRP,  
					SESTRG, FULTAC, HULTAC, CULUSA, NTRMNL
				)
				VALUES
				(
					PARAM_NSLCPR , PARAM_STPENT , PARAM_CENTD , PARAM_CRPRS , PARAM_NOPRCN , PARAM_NWRRNT , PARAM_SFRMRP , PARAM_FFRMRP ,
					PARAM_SESTRG , DC@RNSLIB.FECHA() , DC@RNSLIB.HORA() , PARAM_CULUSA , PARAM_NTRMNL
				);
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF NOT EXISTS (SELECT * FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR=PARAM_NSLCPR AND STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS) THEN
			
				INSERT INTO DC@RNSLIB.ZZWT94
				(
					NSLCPR, STPENT, CENTD, CRPRS, NOPRCN, NWRRNT, SFRMRP,  FFRMRP,  
					SESTRG, FULTAC, HULTAC, CULUSA, NTRMNL
				)
				VALUES
				(
					PARAM_NSLCPR , PARAM_STPENT , PARAM_CENTD , PARAM_CRPRS , PARAM_NOPRCN , PARAM_NWRRNT , PARAM_SFRMRP , PARAM_FFRMRP ,
					PARAM_SESTRG , DC@RNSLIB.FECHA() , DC@RNSLIB.HORA() , PARAM_CULUSA , PARAM_NTRMNL
				);
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;
	
	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_STPENT : ' CONCAT CAST(PARAM_STPENT  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CENTD : ' CONCAT CAST(PARAM_CENTD  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CRPRS : ' CONCAT PARAM_CRPRS  CONCAT ' | ' CONCAT
					'PARAM_NOPRCN : ' CONCAT CAST(PARAM_NOPRCN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NWRRNT : ' CONCAT CAST(PARAM_NWRRNT  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SFRMRP : ' CONCAT PARAM_SFRMRP  CONCAT ' | ' CONCAT
					'PARAM_FFRMRP : ' CONCAT CAST(PARAM_FFRMRP  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_DEP_REPRE',
	pParametros,
	pRespuesta
	);	

END
GO

--FIRMAS  POR PRÓRROGA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_DEP_FIRMASXPROG
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SFRMCL	CHAR (1),
	IN PARAM_NFRRCL	NUMERIC (2,0),
	IN PARAM_NFRMCL	NUMERIC (2,0),
	IN PARAM_SESTRG	CHAR (1) ,
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SFRMCL,'')='' OR
		IFNULL(PARAM_NFRRCL,0)=0 OR
		IFNULL(PARAM_NFRMCL,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')='' 
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;
	
	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_NFRRCL NOT IN (1,2) THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de Firmas Registradas del Cliente no válido, ';
	END IF;
	
	IF PARAM_SFRMCL NOT IN (' ','S') THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Firma del Cliente no válido, ';
	END IF;
	
	IF PARAM_NFRMCL NOT BETWEEN 0 AND 2 THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de firmas del cliente no válido, ';
	END IF;
	
	IF PARAM_SESTRG<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';
	END IF;
	
	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@ALMAPER.ZZWT95
				SET
					SFRMCL =PARAM_SFRMCL ,
					NFRRCL =PARAM_NFRRCL ,
					NFRMCL =PARAM_NFRMCL ,
					SESTRG =PARAM_SESTRG ,
					--NTRMNL =PARAM_NTRMNL ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
				
				IF PARAM_SFRMCL='S' THEN
					UPDATE DC@ALMAPER.ZZWW21
					SET
						SSTSLP='C', 
						FULTAC=DC@RNSLIB.FECHA(), 
						HULTAC=DC@RNSLIB.HORA(), 
						CULUSA=PARAM_CULUSA
					WHERE NSLCPR=PARAM_NSLCPR;
					
				END IF;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@RNSLIB.ZZWT95
				SET
					SFRMCL =PARAM_SFRMCL ,
					NFRRCL =PARAM_NFRRCL ,
					NFRMCL =PARAM_NFRMCL ,
					SESTRG =PARAM_SESTRG ,
					--NTRMNL =PARAM_NTRMNL ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
				
				IF PARAM_SFRMCL='S' THEN
					UPDATE DC@RNSLIB.ZZWW21
					SET
						SSTSLP='C', 
						FULTAC=DC@RNSLIB.FECHA(), 
						HULTAC=DC@RNSLIB.HORA(), 
						CULUSA=PARAM_CULUSA
					WHERE NSLCPR=PARAM_NSLCPR;
					
				END IF;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;
	
	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SFRMCL : ' CONCAT PARAM_SFRMCL  CONCAT ' | ' CONCAT
					'PARAM_NFRRCL : ' CONCAT CAST(PARAM_NFRRCL  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NFRMCL : ' CONCAT CAST(PARAM_NFRMCL  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_DEP_FIRMASXPROG',
	pParametros,
	pRespuesta
	);	
	
END
GO

--4.1.7	REQF007 –  Registro firma prórroga endosatario 
--REPRESENTANTES POR SOLICITUD DE PRÓRROGA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_END_REPRE
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_STPENT	NUMERIC (5,0),
	IN PARAM_CENTD	NUMERIC (6,0),
	IN PARAM_CRPRS	CHAR (5),
	IN PARAM_NOPRCN	NUMERIC (10, 0),
	IN PARAM_NWRRNT	NUMERIC (10, 0),
	IN PARAM_SFRMRP	CHAR (1),
	IN PARAM_FFRMRP	NUMERIC (8,0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF 
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_STPENT,0)=0 OR
		IFNULL(PARAM_CENTD	,0)=0 OR
		IFNULL(PARAM_CRPRS	,'')='' OR
		IFNULL(PARAM_NOPRCN,0)=0 OR
		IFNULL(PARAM_NWRRNT,0)=0 OR
		IFNULL(PARAM_SFRMRP,'')='' OR
		IFNULL(PARAM_FFRMRP,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;

	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_STPENT<>'B' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Tipo de Entidad no válidos, ';		
	END IF;
	
	IF PARAM_CRPRS NOT BETWEEN '00' AND '99999' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código representante no válido, ';	
	END IF;
	
	IF PARAM_SFRMRP<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag firma del representante no válido, ';	
	END IF;
	
	IF PARAM_SESTRG<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';	
	END IF;
	
	IF LENGTH(CAST(PARAM_FFRMRP AS VARCHAR(8)))<>8  OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),1,4) AS INTEGER)<=1900 OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),5,2) AS INTEGER)>12 OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),7,2) AS INTEGER)>31 OR 
	   CAST(SUBSTR(CAST(PARAM_FFRMRP AS VARCHAR(8)),7,2) AS INTEGER)=0 THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Formato de fecha no válida,';		
	END IF;

	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF NOT EXISTS (SELECT * FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR=PARAM_NSLCPR AND STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS) THEN
			
				INSERT INTO DC@ALMAPER.ZZWT94 
				(
					NSLCPR, STPENT, CENTD, CRPRS, NOPRCN, NWRRNT, SFRMRP, FFRMRP,
					SESTRG, FULTAC, HULTAC, CULUSA, NTRMNL
				)
				VALUES 
				(
					PARAM_NSLCPR, PARAM_STPENT, PARAM_CENTD, PARAM_CRPRS, PARAM_NOPRCN, PARAM_NWRRNT, PARAM_SFRMRP, PARAM_FFRMRP,
					PARAM_SESTRG, DC@RNSLIB.FECHA(), DC@RNSLIB.HORA(), PARAM_CULUSA, PARAM_NTRMNL
				);
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
			
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF NOT EXISTS (SELECT * FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR=PARAM_NSLCPR AND STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS) THEN
			
				INSERT INTO DC@RNSLIB.ZZWT94 
				(
					NSLCPR, STPENT, CENTD, CRPRS, NOPRCN, NWRRNT, SFRMRP, FFRMRP,
					SESTRG, FULTAC, HULTAC, CULUSA, NTRMNL
				)
				VALUES 
				(
					PARAM_NSLCPR, PARAM_STPENT, PARAM_CENTD, PARAM_CRPRS, PARAM_NOPRCN, PARAM_NWRRNT, PARAM_SFRMRP, PARAM_FFRMRP,
					PARAM_SESTRG, DC@RNSLIB.FECHA(), DC@RNSLIB.HORA(), PARAM_CULUSA, PARAM_NTRMNL
				);
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro insertado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro ya existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;


	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_STPENT : ' CONCAT CAST(PARAM_STPENT  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CENTD : ' CONCAT CAST(PARAM_CENTD  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CRPRS : ' CONCAT PARAM_CRPRS  CONCAT ' | ' CONCAT
					'PARAM_NOPRCN : ' CONCAT CAST(PARAM_NOPRCN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NWRRNT : ' CONCAT CAST(PARAM_NWRRNT  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SFRMRP : ' CONCAT PARAM_SFRMRP  CONCAT ' | ' CONCAT
					'PARAM_FFRMRP : ' CONCAT CAST(PARAM_FFRMRP  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_END_REPRE',
	pParametros,
	pRespuesta
	);	

END
GO

--FIRMAS  POR PRÓRROGA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_FIRMAS
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SFRMBN	CHAR (1),
	IN PARAM_NFRRBN	NUMERIC (2,0),
	IN PARAM_NFRMBN	NUMERIC (2,0),
	IN PARAM_SESTRG	CHAR (1) ,
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG

	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SFRMBN,'')='' OR
		IFNULL(PARAM_NFRRBN,0)=0 OR
		IFNULL(PARAM_NFRMBN,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;

	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_NFRRBN NOT IN (1,2) THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de Firmas Registradas del Banco no válido, ';	
	END IF;
	
	IF PARAM_SFRMBN NOT IN (' ','S') THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag Firma del Banco no válido, ';	
	END IF;
	
	IF PARAM_NFRMBN NOT BETWEEN 0 AND 2 THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de Firmas del Banco no válido, ';	
	END IF;
	
	IF PARAM_SESTRG<>'A' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';		
	END IF;
	
	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@ALMAPER.ZZWT95
				SET
					SFRMBN =PARAM_SFRMBN ,
					NFRRBN =PARAM_NFRRBN ,
					NFRMBN =PARAM_NFRMBN ,
					SESTRG =PARAM_SESTRG ,
					--NTRMNL =PARAM_NTRMNL ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL =PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
				
				IF PARAM_SFRMBN='S' THEN
				
					UPDATE DC@ALMAPER.ZZWW21
					SET
						SSTSLP = 'B',
						FULTAC = DC@RNSLIB.FECHA(),
						HULTAC = DC@RNSLIB.HORA(),
						CULUSA = PARAM_CULUSA 
					WHERE NSLCPR=PARAM_NSLCPR;
				
				END IF;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@RNSLIB.ZZWT95
				SET
					SFRMBN =PARAM_SFRMBN ,
					NFRRBN =PARAM_NFRRBN ,
					NFRMBN =PARAM_NFRMBN ,
					SESTRG =PARAM_SESTRG ,
					--NTRMNL =PARAM_NTRMNL ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL =PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
				
				IF PARAM_SFRMBN='S' THEN
				
					UPDATE DC@RNSLIB.ZZWW21
					SET
						SSTSLP = 'B',
						FULTAC = DC@RNSLIB.FECHA(),
						HULTAC = DC@RNSLIB.HORA(),
						CULUSA = PARAM_CULUSA 
					WHERE NSLCPR=PARAM_NSLCPR;
				
				END IF;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;

	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SFRMBN : ' CONCAT PARAM_SFRMBN  CONCAT ' | ' CONCAT
					'PARAM_NFRRBN : ' CONCAT CAST(PARAM_NFRRBN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_NFRMBN : ' CONCAT CAST(PARAM_NFRMBN  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_REG_FRM_PRO_FIRMAS',
	pParametros,
	pRespuesta
	);

END
GO

--4.1.8	REQF008 –  Registro firma rechazo depositante
--SOLICITUDES DE PRÓRROGA  
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FRM_RECH_DEP_SOLPRO
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;
	
	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_SESTRG<>'*' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';
	END IF;

	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@ALMAPER.ZZWW21
				SET
					SESTRG = PARAM_SESTRG, 
					FULTAC = DC@RNSLIB.FECHA(), 
					HULTAC = DC@RNSLIB.HORA(), 
					CULUSA = PARAM_CULUSA, 
					NTRMNL = PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR=PARAM_NSLCPR) THEN
				
				UPDATE DC@RNSLIB.ZZWW21
				SET
					SESTRG = PARAM_SESTRG, 
					FULTAC = DC@RNSLIB.FECHA(), 
					HULTAC = DC@RNSLIB.HORA(), 
					CULUSA = PARAM_CULUSA, 
					NTRMNL = PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
				
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;
	
	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_REG_FRM_RECH_DEP',
	pParametros,
	pRespuesta
	);

END
GO

--REPRESENTANTES POR SOLICITUD DE PRÓRROGA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FRM_RECH_DEP_REPSOL
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;
	
	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_SESTRG<>'*' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';
	END IF;

	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@ALMAPER.ZZWT94
				SET
					SESTRG =PARAM_SESTRG ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@RNSLIB.ZZWT94
				SET
					SESTRG =PARAM_SESTRG ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;
	
	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_REG_FRM_RECH_DEP_REPSOL',
	pParametros,
	pRespuesta
	);

END
GO

--FIRMAS  POR PRÓRROGA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FRM_RECH_DEP_FIRMAS
(
	IN PARAM_CCMPN	CHAR (2),
	IN PARAM_NSLCPR	NUMERIC (10, 0),
	IN PARAM_SESTRG	CHAR (1),
	IN PARAM_CULUSA	CHAR (10),
	IN PARAM_NTRMNL	CHAR  (10),
	INOUT PARAM_PROCSTATUS INT,
	INOUT PARAM_PROCDESC VARCHAR(2000)	
)
BEGIN
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE VAL INTEGER DEFAULT 0;

	--DECLARE LOG
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);
	--FIN LOG
	
	IF
		IFNULL(PARAM_CCMPN	,'')='' OR
		IFNULL(PARAM_NSLCPR,0)=0 OR
		IFNULL(PARAM_SESTRG,'')='' OR
		IFNULL(PARAM_CULUSA,'')='' OR
		IFNULL(PARAM_NTRMNL,'')=''
	THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros deben de tener valor, ';
	END IF;
	
	IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos, ';	
	END IF;
	
	IF PARAM_SESTRG<>'*' THEN
		SET VAL=VAL+1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro no válido, ';
	END IF;

	IF PARAM_CULUSA NOT IN ('WEBALMA','WEBCASA') OR PARAM_NTRMNL NOT IN ('WEBALMA','WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Usuario no pertenece a la compañía,';		
	END IF;
	
	IF VAL=0 THEN	
		IF PARAM_CCMPN='AM' THEN
			IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@ALMAPER.ZZWT95
				SET
					SESTRG =PARAM_SESTRG ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
			
		ELSEIF PARAM_CCMPN='LZ' THEN
			IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR=PARAM_NSLCPR) THEN
			
				UPDATE DC@RNSLIB.ZZWT95
				SET
					SESTRG =PARAM_SESTRG ,
					FULTAC =DC@RNSLIB.FECHA() ,
					HULTAC =DC@RNSLIB.HORA() ,
					CULUSA =PARAM_CULUSA ,
					NTRMNL=PARAM_NTRMNL
				WHERE NSLCPR=PARAM_NSLCPR;
			
				SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='Registro modificado';
			ELSE
				SET PARAM_PROCSTATUS=1;
				SET PARAM_PROCDESC='Registro no existe';
			END IF;
		ELSE
			SET PARAM_PROCSTATUS=1;
			SET PARAM_PROCDESC='Error en el esquema';		
		END IF;
	ELSE
		SET PARAM_PROCSTATUS=1;
		SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;	
	END IF;


	SET pParametros=				
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_NSLCPR : ' CONCAT CAST(PARAM_NSLCPR  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | ' CONCAT
					'PARAM_NTRMNL : ' CONCAT PARAM_NTRMNL
					;
	SET pRespuesta=CAST(PARAM_PROCSTATUS AS VARCHAR(100)); -- CONCAT '|' CONCAT PARAM_PROCDESC;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_PRG_REG_FRM_RECH_DEP_FIRMAS',
	pParametros,
	pRespuesta
	);

END
GO



--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------


-- ----------------------------------------------------------------------------------------------------
--  4.1.9   REQF009     Registro Firma Rechazo Endosatorio (Solicitudes de prórroga)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FIRMA_RECHAZO_END_SOLPRG
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_SESTRG <> '*' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWW21
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWW21
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Registro modificado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWW21
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Registro modificado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_REG_FIRMA_RECHAZO_END_SOLPRG', PARAMETROS, RESPUESTA);
END
GO


-- ----------------------------------------------------------------------------------------------------
--  4.1.9   REQF009     Registro Firma Rechazo Endosatorio (Representantes por solicitud)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FIRMA_RECHAZO_END_REPSOL
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> '*' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWT94
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT94
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Registro modificado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT94
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Registro modificado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_REG_FIRMA_RECHAZO_END_REPSOL', PARAMETROS, RESPUESTA);
END
GO


-- ----------------------------------------------------------------------------------------------------
--  4.1.9   REQF009     Registro Firma Rechazo Endosatorio (Firmas por prórroga)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_REG_FIRMA_RECHAZO_END_FIRPRG
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> '*' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWT95
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT95
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = RNSLIB.FECHA(),
                    HULTAC = RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Registro modificado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT95
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = RNSLIB.FECHA(),
                    HULTAC = RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Registro modificado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_REG_FIRMA_RECHAZO_END_FIRPRG', PARAMETROS, RESPUESTA);
END
GO



-- ----------------------------------------------------------------------------------------------------
--  4.1.10  REQF010     Rollback Anulación Solicitud de Prórroga
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_ANULACION_SOLICITUD_PRORROGA
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SSTSLP CHAR(1),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SSTSLP, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

	IF PARAM_SESTRG<>'*' THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado registro, no válido,';
	END IF;
	
	IF PARAM_SSTSLP<>'P' THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag situación Solicitud prórroga, no válido,';
	END IF;
	
	IF PARAM_SESTRG<>'A' THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado del registro, no válido,';
	END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWW21
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWW21
                SET
                    SSTSLP ='P',
                    SESTRG = 'A',
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWW21
                SET
                    SSTSLP = 'P',
                    SESTRG = 'A',
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SSTSLP: ' || IFNULL(PARAM_SSTSLP, '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_ANULACION_SOLICITUD_PRORROGA', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.1.11  REQF011     Rollback Envío Solicitud de Prórroga
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_ENVIAR_SOLICITUD_PRORROGA
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SSTSLP CHAR(1),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SSTSLP, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

	IF PARAM_SSTSLP<>'P' THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag situación Solicitud prórroga, no válido,';
	END IF;
	
	IF PARAM_SESTRG<>'A' THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado del registro, no válido,';
	END IF;	

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWW21
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWW21
                SET
                    SSTSLP ='P',
                    SESTRG = 'A',
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWW21
                SET
                    SSTSLP = 'P',
                    SESTRG = 'A',
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SSTSLP: ' || IFNULL(PARAM_SSTSLP, '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_ENVIAR_SOLICITUD_PRORROGA', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.1.12  REQF012     Rollback Registro firma prórroga depositante
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_PRORROGA_DEP
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Datos de compañía no válidos,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWT95 / Eliminación ZZWT94
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT95
                SET
                    SFRMCL = ' ',
                    NFRMCL = 0,
                    NFRRCL = 0 , 
                    FULTAC = DC@RNSLIB.FECHA(), 
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                IF EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'C') THEN
                    DELETE FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'C';
                END IF;

                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT95
                SET
                    SFRMCL = ' ',
                    NFRMCL = 0,
                    NFRRCL = 0 , 
                    FULTAC = DC@RNSLIB.FECHA(), 
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                IF EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'C') THEN
                    DELETE FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'C';
                END IF;

                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_PRORROGA_DEP', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.1.13  REQF013     Rollback registro firma rechazo depositante (Solicitudes de prórroga)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_RECHAZO_DEP_SOLPRG
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> 'A' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWW21
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWW21
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado,';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWW21
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado,';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_RECHAZO_DEP_SOLPRG', PARAMETROS, RESPUESTA);
END
GO
-- ----------------------------------------------------------------------------------------------------
--  4.1.13  REQF013     Rollback registro firma rechazo depositante (Representantes de solicitud)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_RECHAZO_DEP_REPSOL
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> 'A' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWT94
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'C') THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT94
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR AND STPENT = 'C';
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'C') THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT94
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR AND STPENT = 'C';
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_RECHAZO_DEP_REPSOL', PARAMETROS, RESPUESTA);
END
GO
-- ----------------------------------------------------------------------------------------------------
--  4.1.13  REQF013     Rollback registro firma rechazo depositante (Firmas por prórroga)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_RECHAZO_DEP_FIRPRG
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> 'A' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWT95
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT95
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT95
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC ='Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_RECHAZO_DEP_FIRPRG', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.1.14  REQF014     Rollback registro firma prórroga endosatorio
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_PRORROGA_END
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Actualización ZZWT95 / Eliminación ZZWT94
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Lógica
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT95
                SET
                    SFRMBN = ' ',
                    NFRMBN = 0,
                    NFRRBN = 0, 
                    FULTAC = DC@RNSLIB.FECHA(), 
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                IF EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B') THEN
                    DELETE FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B';
                END IF;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT95
                SET
                    SFRMBN = ' ',
                    NFRMBN = 0,
                    NFRRBN = 0, 
                    FULTAC = DC@RNSLIB.FECHA(), 
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE
                    NSLCPR = PARAM_NSLCPR;
                
                IF EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B') THEN
                    DELETE FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B';
                END IF;
                
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REGISTRO_FIRMA_PRORROGA_END', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.1.15  REQF015     Rollback registro firma rechazo endosatorio (Solicitudes de prórroga)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REG_FIRMA_RECHAZO_END_SOLPRG
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> 'A' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWW21
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWW21
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE NSLCPR = PARAM_NSLCPR;
            
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWW21 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWW21
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE NSLCPR = PARAM_NSLCPR;
            
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REG_FIRMA_RECHAZO_END_SOLPRG', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.1.15  REQF015     Rollback registro firma rechazo endosatorio (Representantes por solicitud)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REG_FIRMA_RECHAZO_END_REPSOL
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> 'A' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWT94
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B') THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT94
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B';
            
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT94 WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B') THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT94
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE NSLCPR = PARAM_NSLCPR AND STPENT = 'B';
            
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REG_FIRMA_RECHAZO_END_REPSOL', PARAMETROS, RESPUESTA);
END
GO


-- ----------------------------------------------------------------------------------------------------
--  4.1.15  REQF015     Rollback registro firma rechazo endosatorio (Firmas por prórroga)
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_ROLL_REG_FIRMA_RECHAZO_END_FIRPRG
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_NSLCPR NUMERIC(10, 0),
    IN PARAM_SESTRG CHAR(1),
    IN PARAM_CULUSA CHAR(10),
    IN PARAM_NTRMNL CHAR(10),
    INOUT PARAM_PROCSTATUS INT,
    INOUT PARAM_PROCDESC VARCHAR(250)
)
BEGIN
    DECLARE VAL INTEGER DEFAULT 0;
	DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    -- Validaciones
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        IFNULL(PARAM_NSLCPR, 0) = 0 OR
        TRIM(B ' ' FROM IFNULL(PARAM_SESTRG, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_CULUSA, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_NTRMNL, '')) = ''
    THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Los parámetros de entrada deben tener valor,';
    END IF;

    IF PARAM_CCMPN NOT IN ('AM', 'LZ') THEN
        SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de compañía no válido,';
    END IF;

    IF PARAM_SESTRG <> 'A' THEN
        SET VAL = VAL + 1;
        SET PARAM_PROCDESC = PARAM_PROCDESC || 'Flag estado de registro no válido,';
    END IF;

    IF PARAM_CULUSA NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Código de usuario no válido,';
	END IF;

    IF PARAM_NTRMNL NOT IN ('WEBALMA', 'WEBCASA') THEN
		SET VAL = VAL + 1;
		SET PARAM_PROCDESC = PARAM_PROCDESC || 'Número de terminal no válido,';
	END IF;

    -- Actualización ZZWT95
    IF VAL = 0 THEN

        IF PARAM_CCMPN = 'AM' THEN --DC@ALMAPER

            IF NOT EXISTS (SELECT 1 FROM DC@ALMAPER.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@ALMAPER.ZZWT95
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE NSLCPR = PARAM_NSLCPR;
            
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSEIF PARAM_CCMPN = 'LZ' THEN --DC@RNSLIB
        
            IF NOT EXISTS (SELECT 1 FROM DC@RNSLIB.ZZWT95 WHERE NSLCPR = PARAM_NSLCPR) THEN
                SET PARAM_PROCSTATUS = 1;
                SET PARAM_PROCDESC = 'El registro no existe';
            ELSE
                UPDATE
                    DC@RNSLIB.ZZWT95
                SET
                    SESTRG = PARAM_SESTRG,
                    FULTAC = DC@RNSLIB.FECHA(),
                    HULTAC = DC@RNSLIB.HORA(),
                    CULUSA = PARAM_CULUSA,
                    NTRMNL = PARAM_NTRMNL
                WHERE NSLCPR = PARAM_NSLCPR;
            
                SET PARAM_PROCSTATUS = 0;
                SET PARAM_PROCDESC = 'Rollback realizado';
            END IF;

        ELSE
            SET PARAM_PROCSTATUS = 1;
			SET PARAM_PROCDESC = 'Esquema no válido';
        END IF;

    ELSE
        SET PARAM_PROCSTATUS = 1;
		SET PARAM_PROCDESC = 'Error en validaciones: ' || PARAM_PROCDESC;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_SESTRG: ' || IFNULL(PARAM_SESTRG, '(NULL)') || ' | ' ||
        'PARAM_CULUSA: ' || IFNULL(PARAM_CULUSA, '(NULL)') || ' | ' ||
        'PARAM_NTRMNL: ' || IFNULL(PARAM_NTRMNL, '(NULL)');
	SET RESPUESTA = IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(250)) || ' | ' || IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_ROLL_REG_FIRMA_RECHAZO_END_FIRPRG', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.2.1   REQFE001    Consulta prórrogas de warrants vigentes
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_CONSULTA_PRORROGAS_WAR_VIGENTES
(
    IN PARAM_CCMPN CHAR(2)
)
LANGUAGE SQL 
DYNAMIC RESULT SETS 1
BEGIN
    DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    DECLARE C_NODATA CURSOR FOR
        SELECT 'Sin datos' AS RESULT FROM SYSIBM.SYSDUMMY1;
    
    DECLARE C_ALMAPER CURSOR FOR
        SELECT
            -- Operaciones Cabecera (ZZWM06)
            A.CCMPN, A.NOPRCN, A.NWRRNT, A.NCRTDP, A.CTPOAL, A.CTOPRC, A.CALMCM, A.CCLNT, A.CCMPSG, A.SSGRPR, A.CRGMN,
            A.SCNINP, A.ISLVFS, A.ISLVFN, A.ISLVLD, A.CFNNC, A.FINGR, A.FPRMVN, A.FVNCMX, A.CMNDA, A.SSTCOP,
            -- Almacenes (RZZM23)
            B.CUBALC, B.TDRALC,
            -- Solicitudes de prórroga (ZZWM21)
            C.NSLCPR, C.FPRRGA, C.ISLDCL, C.ISLDMR,
            -- Representantes por prórroga (Financiador)
            D.NSLCPR AS NSLCPR1, D.CRPRS AS CRPRS1, D.FFRMRP AS FFRMRP1, D.HULTAC AS HULTAC1,
            -- Representantes por prórroga (Cliente)
            E.NSLCPR AS NSLCPR2, E.CRPRS AS CRPRS2, E.FFRMRP AS FFRMRP2, E.HULTAC AS HULTAC2,
            -- Exwarrant
            G.NEXWRR
        FROM
            -- Operaciones ZZWM06
            DC@ALMAPER.ZZWM06 A
            -- Almacenes RZZM23
            LEFT OUTER JOIN DC@ALMAPER.RZZM23 B ON A.CTPOAL = B.CTPOAL AND A.CALMCM = B.CALMCM
            -- Solicitudes de prórroga ZZWW21
            LEFT OUTER JOIN DC@ALMAPER.ZZWW21 C ON A.NOPRCN = C.NOPRCN
            -- Representantes de solicitud de prórroga ZZWT94
            LEFT OUTER JOIN DC@ALMAPER.ZZWT94 D ON C.NSLCPR = D.NSLCPR AND D.STPENT = 'A' -- Almacenera
            LEFT OUTER JOIN DC@ALMAPER.ZZWT94 E ON C.NSLCPR = E.NSLCPR AND E.STPENT = 'B' -- Financiador
            LEFT OUTER JOIN DC@ALMAPER.ZZWT94 F ON C.NSLCPR = E.NSLCPR AND E.STPENT = 'C' -- Cliente
            -- Exwarrant ZZWT23
            LEFT OUTER JOIN DC@ALMAPER.ZZWT23 G ON A.NOPRCN = G.NOPRCN
        WHERE
            A.CTOPRC = 'W' AND A.SESTRG = 'A';
    
    DECLARE C_RNSLIB CURSOR FOR
        SELECT
            -- Operaciones Cabecera (ZZWM06)
            A.CCMPN, A.NOPRCN, A.NWRRNT, A.NCRTDP, A.CTPOAL, A.CTOPRC, A.CALMCM, A.CCLNT, A.CCMPSG, A.SSGRPR, A.CRGMN,
            A.SCNINP, A.ISLVFS, A.ISLVFN, A.ISLVLD, A.CFNNC, A.FINGR, A.FPRMVN, A.FVNCMX, A.CMNDA, A.SSTCOP,
            -- Almacenes (RZZM23)
            B.CUBALC, B.TDRALC,
            -- Solicitudes de prórroga (ZZWM21)
            C.NSLCPR, C.FPRRGA, C.ISLDCL, C.ISLDMR,
            -- Representantes por prórroga (Almacenera)
            D.NSLCPR AS NSLCPR1, D.CRPRS AS CRPRS1, D.FFRMRP AS FFRMRP1, D.HULTAC AS HULTAC1,
            -- Representantes por prórroga (Financiador)
            E.NSLCPR AS NSLCPR2, E.CRPRS AS CRPRS2, E.FFRMRP AS FFRMRP2, E.HULTAC AS HULTAC2,
            -- Representantes por prórroga (Cliente)
            F.NSLCPR AS NSLCPR3, E.CRPRS AS CRPRS3, E.FFRMRP AS FFRMRP3, E.HULTAC AS HULTAC3
            -- Exwarrant
            G.NEXWRR
        FROM
            -- Operaciones ZZWM06
            DC@RNSLIB.ZZWM06 A
            -- Almacenes RZZM23
            LEFT OUTER JOIN DC@RNSLIB.RZZM23 B ON A.CTPOAL = B.CTPOAL AND A.CALMCM = B.CALMCM
            -- Solicitudes de prórroga ZZWW21
            LEFT OUTER JOIN DC@RNSLIB.ZZWW21 C ON A.NOPRCN = C.NOPRCN
            -- Representantes de solicitud de prórroga ZZWT94
            LEFT OUTER JOIN DC@RNSLIB.ZZWT94 D ON C.NSLCPR = D.NSLCPR AND D.STPENT = 'A' -- Almacenera
            LEFT OUTER JOIN DC@RNSLIB.ZZWT94 E ON C.NSLCPR = E.NSLCPR AND E.STPENT = 'B' -- Financiador
            LEFT OUTER JOIN DC@RNSLIB.ZZWT94 F ON C.NSLCPR = E.NSLCPR AND E.STPENT = 'C' -- Cliente
            -- Exwarrant ZZWT23
            LEFT OUTER JOIN DC@RNSLIB.ZZWT23 G ON A.NOPRCN = G.NOPRCN
        WHERE
            A.CTOPRC = 'W' AND A.SESTRG = 'A';
    
    SET RESPUESTA = '';
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = ''
    THEN
        SET RESPUESTA = 'Sin datos';
        OPEN C_NODATA;
    ELSE
        IF PARAM_CCMPN = 'AM' THEN
            OPEN C_ALMAPER;
        ELSEIF PARAM_CCMPN = 'LZ' THEN
            OPEN C_RNSLIB;
        ELSE
            SET RESPUESTA = 'Sin datos';
            OPEN C_NODATA;
        END IF;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)');
    
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_CONSULTA_PRORROGAS_WAR_VIGENTES', PARAMETROS, RESPUESTA);
END
GO

-- ----------------------------------------------------------------------------------------------------
--  4.2.2   REQFE002    Consulta Relación de los datos de la prórroga
-- ----------------------------------------------------------------------------------------------------
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_PRG_CONSULTA_RELACION_DATOS_PRORROGA
(
    IN PARAM_CCMPN CHAR(2),
    IN PARAM_STPQRY CHAR(1),
    IN PARAM_CODQRY NUMERIC(10,0),
    IN PARAM_NSLCPR NUMERIC(10,0)
)
LANGUAGE SQL 
DYNAMIC RESULT SETS 1
BEGIN
    DECLARE PARAMETROS VARCHAR(2000);
	DECLARE RESPUESTA VARCHAR(100);

    DECLARE C_NODATA CURSOR FOR
        SELECT 'Sin datos' AS RESULT FROM SYSIBM.SYSDUMMY1;
    
    -- NSLCPR no tiene valor
    DECLARE C_ALMAPER CURSOR FOR
        SELECT
            -- Operaciones - Cabecera (ZZWM06)
            A.CCMPN, A.NOPRCN, A.NWRRNT, A.NCRTDP, A.CCLNT, A.CFNNC, A.SSTCOP, A.SESTRG,
            -- Solicitudes de prórroga (ZZWW21)
            B.NSLCPR, B.NENDS, B.FENDS, B.FPRRGA, B.ISLDCL, B.ISLDMR
        FROM
            DC@ALMAPER.ZZWM06 A
            LEFT OUTER JOIN DC@ALMAPER.ZZWW21 B ON A.NOPRCN = B.NOPRCN
        WHERE
            A.CCMPN = PARAM_CCMPN AND (
                (A.PARAM_STPQRY = 'C' AND A.CCLNT = PARAM_CODQRY) OR
                (A.PARAM_STPQRY = 'B' AND A.CFNNC = PARAM_CODQRY)
            );
    
    -- NSLCPR tiene valor
    DECLARE C_ALMAPER_2 CURSOR FOR
        SELECT
            -- Operaciones - Cabecera (ZZWM06)
            B.CCMPN, B.NOPRCN, B.NWRRNT, B.NCRTDP, B.CCLNT, B.CFNNC, B.SSTCOP, B.SESTRG,
            -- Solicitudes de prórroga (ZZWW21)
            A.NSLCPR, A.NENDS, A.FENDS, A.FPRRGA, A.ISLDCL, A.ISLDMR
        FROM
            DC@ALMAPER.ZZWW21 A
            LEFT OUTER JOIN DC@ALMAPER.ZZWM06 B ON A.NOPRCN = B.NOPRCN
        WHERE
            A.NOPRCN = PARAM_NSLCPR;
            
    
    -- NSLCPR no tiene valor
    DECLARE C_RNSLIB CURSOR FOR
        SELECT
            -- Operaciones - Cabecera (ZZWM06)
            A.CCMPN, A.NOPRCN, A.NWRRNT, A.NCRTDP, A.CCLNT, A.CFNNC, A.SSTCOP, A.SESTRG,
            -- Solicitudes de prórroga (ZZWW21)
            B.NSLCPR, B.NENDS, B.FENDS, B.FPRRGA, B.ISLDCL, B.ISLDMR
        FROM
            DC@RNSLIB.ZZWM06 A
            LEFT OUTER JOIN DC@RNSLIB.ZZWW21 B ON A.NOPRCN = B.NOPRCN
        WHERE
            A.CCMPN = PARAM_CCMPN AND (
                (A.PARAM_STPQRY = 'C' AND A.CCLNT = PARAM_CODQRY) OR
                (A.PARAM_STPQRY = 'B' AND A.CFNNC = PARAM_CODQRY)
            );
    
    -- NSLCPR tiene valor
    DECLARE C_RNSLIB_2 CURSOR FOR
        SELECT
            -- Operaciones - Cabecera (ZZWM06)
            B.CCMPN, B.NOPRCN, B.NWRRNT, B.NCRTDP, B.CCLNT, B.CFNNC, B.SSTCOP, B.SESTRG,
            -- Solicitudes de prórroga (ZZWW21)
            A.NSLCPR, A.NENDS, A.FENDS, A.FPRRGA, A.ISLDCL, A.ISLDMR
        FROM
            DC@RNSLIB.ZZWW21 A
            LEFT OUTER JOIN DC@RNSLIB.ZZWM06 B ON A.NOPRCN = B.NOPRCN
        WHERE
            A.NOPRCN = PARAM_NSLCPR;
    
    SET RESPUESTA = '';
    IF
        TRIM(B ' ' FROM IFNULL(PARAM_CCMPN, '')) = '' OR
        TRIM(B ' ' FROM IFNULL(PARAM_STPQRY, '')) = '' OR
        IFNULL(PARAM_CODQRY, 0) = 0 OR
        PARAM_STPQRY NOT IN ('C','B')
    THEN
        SET RESPUESTA = 'Sin datos';
        OPEN C_NODATA;
    ELSE
        IF PARAM_CCMPN = 'AM' THEN
            IF ISNULL(PARAM_NSLCPR, 0) = 0 THEN
                OPEN C_ALMAPER;
            ELSE
                OPEN C_ALMAPER_2;
            END IF;
        ELSEIF PARAM_CCMPN = 'LZ' THEN
            IF ISNULL(PARAM_NSLCPR, 0) = 0 THEN
                OPEN C_RNSLIB;
            ELSE
                OPEN C_RNSLIB_2;
            END IF;
        ELSE
            SET RESPUESTA = 'Sin datos';
            OPEN C_NODATA;
        END IF;
    END IF;

    SET PARAMETROS =
        'PARAM_CCMPN: ' || IFNULL(PARAM_CCMPN, '(NULL)') || ' | ' ||
        'PARAM_STPQRY: ' || IFNULL(PARAM_STPQRY, '(NULL)') || ' | ' ||
        'PARAM_CODQRY: ' || IFNULL(CAST(PARAM_CODQRY AS VARCHAR(30)), '(NULL)') || ' | ' ||
        'PARAM_NSLCPR: ' || IFNULL(CAST(PARAM_NSLCPR AS VARCHAR(30)), '(NULL)');
    
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('SP_INTSGO_PRG_CONSULTA_RELACION_DATOS_PRORROGA', PARAMETROS, RESPUESTA);
END
GO



