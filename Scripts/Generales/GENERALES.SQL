-- *************************************************************************************
-- STORED PROCEDURES ''GENERALES''  - PROYECTO INTEGRACION WARRANT AFI - SGO
-- *************************************************************************************

-- CONSIDERACIONES PARA LAS SENTENCIAS DE INSERT / UPDATE :
-- 1. LOS STORED PROCEDURES TENDRAN 2 PARÁMETROS DE SALIDA,
--      EL PRIMERO ES EL ESTADO DEL PROCEDIMIENTO PARAM_PROCSTATUS (ENTERO)
--      EL SEGUNDO PARAMETRO ES UN TEXTO LARGO PARAM_PROCDESC( 250 CARACTERES) CONTENIENDO LA DESCRIPCION EN TEXTO DE LO OCURRIDO
--      CADA VALIDACION SERÁ SEPARADA POR EL CARACTER '' , '' PARA QUE EL PROVEEDOR PUEDA PARTIR LOS MENSAJES
--      INDIVIDUALES
-- 2.   EL CONTROL DE TRANSACCION LO REALIZARÁ EL PROGRAMA QUE INVOCARÁ AL STORED PROCEDURE.
-- **************************************************************************************
 --REQF001 –  Creación Usuario 
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_REGISTRO_CLIENTE
(
IN PARAM_CCMPN CHAR(2),
IN PARAM_CODCLE NUMERIC (6, 0),
IN PARAM_FLGTPO CHAR (1),
IN PARAM_CODCLIW NUMERIC (6, 0),
IN PARAM_DESCLI CHAR (55),
IN PARAM_CUSCRT CHAR (10),
INOUT PARAM_PROCSTATUS INT,
INOUT PARAM_PROCDESC VARCHAR(2000) 
)
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE VAL INTEGER DEFAULT 0;
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);
-- VALIDACIONES

IF IFNULL(PARAM_CCMPN,'')='' OR
   IFNULL(PARAM_CODCLE,0)=0 OR
   IFNULL(PARAM_FLGTPO,'')='' OR
   IFNULL(PARAM_CODCLIW,0)=0 OR
   IFNULL(PARAM_DESCLI,'')='' OR
   IFNULL(PARAM_CUSCRT,'')=''
   THEN
   SET VAL=VAL+1;
   SET PARAM_PROCDESC= PARAM_PROCDESC || 'Los parámetros deben de tener algún valor,';
END IF;

IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
	SET VAL=VAL+1;
	SET PARAM_PROCDESC= PARAM_PROCDESC || 'Datos de compañía no válidos,';

END IF;

IF PARAM_FLGTPO<>'B' AND PARAM_FLGTPO<>'C' AND PARAM_FLGTPO<>'A' THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Tipo de entidad no válido,';
END IF;

IF PARAM_CUSCRT<>'WEBCASA' AND PARAM_CUSCRT<>'WEBALMA' THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Usuario de acceso no válido,';
END IF;

IF VAL=0 THEN

        IF PARAM_CCMPN='LZ' THEN
        
        	IF NOT EXISTS (SELECT * FROM DC@RNSLIB.CLIREL WHERE CODCLE=PARAM_CODCLE AND FLGTPO=PARAM_FLGTPO AND CODCLIW =PARAM_CODCLIW ) THEN
        	
				INSERT INTO DC@RNSLIB.CLIREL (CODCLE, FLGTPO, CODCLIW, DESCLI,  CUSCRT, FCHCRT, HRACRT/*, NTRMCR, FULTAC, HULTAC, CULUSA, NTRMNL, UPDATE_IDENT*/)
                VALUES
                                (PARAM_CODCLE,
                                PARAM_FLGTPO,
                                PARAM_CODCLIW,
                                PARAM_DESCLI,
                                PARAM_CUSCRT,
                                DC@RNSLIB.FECHA(),
                                DC@RNSLIB.HORA()                                
                                );
                                SET PARAM_PROCSTATUS=0;
                                SET PARAM_PROCDESC='Registro insertado';        	
        	
        	ELSE
        		SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='El registro ya existe';
        	
        	END IF;
        	
                
                ELSEIF PARAM_CCMPN='AM' THEN
                
                IF NOT EXISTS (SELECT * FROM DC@ALMAPER.CLIREL WHERE CODCLE=PARAM_CODCLE AND FLGTPO=PARAM_FLGTPO AND CODCLIW =PARAM_CODCLIW ) THEN
				INSERT INTO DC@ALMAPER.CLIREL (CODCLE, FLGTPO, CODCLIW, DESCLI,  CUSCRT, FCHCRT, HRACRT/*, NTRMCR, FULTAC, HULTAC, CULUSA, NTRMNL, UPDATE_IDENT*/)
                VALUES
                                (PARAM_CODCLE,
                                PARAM_FLGTPO,
                                PARAM_CODCLIW,
                                PARAM_DESCLI,
                                PARAM_CUSCRT,
                                DC@RNSLIB.FECHA(),
                                DC@RNSLIB.HORA()                                
                                );
                                SET PARAM_PROCSTATUS=0;
                                SET PARAM_PROCDESC='Registro insertado';        	
        	
        	ELSE
        		SET PARAM_PROCSTATUS=0;
				SET PARAM_PROCDESC='El registro ya existe';
        	
        	END IF;                
                
                                
                ELSE
                                SET PARAM_PROCSTATUS=1;
                                SET PARAM_PROCDESC='Error en el esquema';
                END IF;

ELSE
                SET PARAM_PROCSTATUS=1;
                SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;
END IF;

	SET pParametros='PARAM_CCMPN: ' CONCAT PARAM_CCMPN CONCAT ' | ' CONCAT 
					'PARAM_CODCLE: ' CONCAT CAST(PARAM_CODCLE AS VARCHAR(2000)) CONCAT ' | ' CONCAT  
					'PARAM_FLGTPO: ' CONCAT PARAM_FLGTPO CONCAT ' | ' CONCAT 					
					'PARAM_CODCLIW: ' CONCAT CAST(PARAM_CODCLIW AS VARCHAR(2000)) CONCAT ' | ' CONCAT 
					'PARAM_DESCLI: ' CONCAT PARAM_DESCLI CONCAT ' | ' CONCAT 	
					'PARAM_CUSCRT: ' CONCAT PARAM_CUSCRT CONCAT ' | ' 						
					;
	SET pRespuesta=IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(100)) CONCAT ' | ' CONCAT IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_REGISTRO_CLIENTE',
	pParametros,
	pRespuesta
	);

END
GO

--***************************************************************************************************
DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_REGISTRA_REPRESENTANTE
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_REGISTRA_REPRESENTANTE
(
IN PARAM_CCMPN CHAR(2),
IN PARAM_STPENT CHAR (1),
IN PARAM_CENTD NUMERIC (6, 0),
IN PARAM_CRPRS CHAR (5),
IN PARAM_TRPRS CHAR (30),
IN PARAM_TRUTFR CHAR (50),
IN PARAM_TDRCRD CHAR (50),
IN PARAM_SESTRG CHAR (1),
IN PARAM_CULUSA CHAR (10),
INOUT PARAM_PROCSTATUS INT,
INOUT PARAM_PROCDESC VARCHAR(2000) 
)
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE VAL INTEGER DEFAULT 0;
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);
-- VALIDACIONES

IF IFNULL(PARAM_CCMPN,'')='' OR   
   IFNULL(PARAM_STPENT,'')='' OR
   IFNULL(PARAM_CENTD,0)=0 OR
   IFNULL(PARAM_CRPRS,'')='' OR
   IFNULL(PARAM_TRPRS,'')='' OR
   IFNULL(PARAM_TRUTFR,'')='' OR
   IFNULL(PARAM_TDRCRD,'')='' OR
   IFNULL(PARAM_SESTRG,'')='' OR
   IFNULL(PARAM_CULUSA,'')=''
   THEN
   SET VAL=VAL+1;
   SET PARAM_PROCDESC= PARAM_PROCDESC || 'Los parámetros deben de tener algún valor,';
END IF;


IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
	SET VAL=VAL+1;
	SET PARAM_PROCDESC= PARAM_PROCDESC || 'Datos de compañía no válidos,';

END IF;

IF PARAM_STPENT<>'A' AND PARAM_STPENT<>'B' AND PARAM_STPENT<>'C' THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Tipo de entidad no válido,';
END IF;

IF PARAM_SESTRG<>'A'  THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Estado no válido,';
END IF;

IF PARAM_CULUSA<>'WEBCASA' AND PARAM_CULUSA<>'WEBALMA' THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Usuario de acceso no válido,';
END IF;

IF VAL=0 THEN


                IF PARAM_CCMPN='LZ' THEN
					
					IF NOT EXISTS (SELECT * FROM DC@RNSLIB.ZZWT88 WHERE STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS) THEN
					
                                INSERT INTO  DC@RNSLIB.ZZWT88 (
                                STPENT,
                                CENTD,
                                CRPRS,
                                TRPRS,
                                TRUTFR,
                                TDRCRD,
                                SESTRG,
                                FULTAC,
                                HULTAC,
                                CULUSA)
                                VALUES(
                                PARAM_STPENT,
                                PARAM_CENTD,
                                PARAM_CRPRS,
                                PARAM_TRPRS,
                                PARAM_TRUTFR,
                                PARAM_TDRCRD,
                                PARAM_SESTRG,
                                DC@RNSLIB.FECHA(),
                                DC@RNSLIB.HORA(),
                                PARAM_CULUSA);
                                SET PARAM_PROCSTATUS=0;
                                SET PARAM_PROCDESC='Registro insertado';

					ELSE
								SET PARAM_PROCSTATUS=1;
                                SET PARAM_PROCDESC='El registro ya existe';
					END IF;

                ELSEIF PARAM_CCMPN='AM' THEN
                                
						IF NOT EXISTS (SELECT * FROM DC@ALMAPER.ZZWT88 WHERE STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS) THEN
					
                                INSERT INTO  DC@ALMAPER.ZZWT88 (
                                STPENT,
                                CENTD,
                                CRPRS,
                                TRPRS,
                                TRUTFR,
                                TDRCRD,
                                SESTRG,
                                FULTAC,
                                HULTAC,
                                CULUSA)
                                VALUES(
                                PARAM_STPENT,
                                PARAM_CENTD,
                                PARAM_CRPRS,
                                PARAM_TRPRS,
                                PARAM_TRUTFR,
                                PARAM_TDRCRD,
                                PARAM_SESTRG,
                                DC@RNSLIB.FECHA(),
                                DC@RNSLIB.HORA(),
                                PARAM_CULUSA);
                                SET PARAM_PROCSTATUS=0;
                                SET PARAM_PROCDESC='El registro insertado';

					ELSE
								SET PARAM_PROCSTATUS=1;
                                SET PARAM_PROCDESC='El registro ya existe';
					END IF;                                
                                
                ELSE
                                SET PARAM_PROCSTATUS=1;
                                SET PARAM_PROCDESC='Error en el esquema';
                END IF;

ELSE
                SET PARAM_PROCSTATUS=1;
                SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;
END IF;


	SET pParametros=
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_STPENT : ' CONCAT PARAM_STPENT  CONCAT ' | ' CONCAT
					'PARAM_CENTD : ' CONCAT CAST(PARAM_CENTD  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CRPRS : ' CONCAT PARAM_CRPRS  CONCAT ' | ' CONCAT
					'PARAM_TRPRS : ' CONCAT PARAM_TRPRS  CONCAT ' | ' CONCAT
					'PARAM_TRUTFR : ' CONCAT PARAM_TRUTFR  CONCAT ' | ' CONCAT
					'PARAM_TDRCRD : ' CONCAT PARAM_TDRCRD  CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA  CONCAT ' | '					
					;
	SET pRespuesta=IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(100)) CONCAT ' | ' CONCAT IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_REGISTRA_REPRESENTANTE',
	pParametros,
	pRespuesta
	);


END
GO
--***************************************************************************************************
--4.1.2   REQF002 – Modificación de Usuario

CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_ACTUALIZA_REPRESENTANTE
(
IN PARAM_CCMPN CHAR(2),
IN PARAM_STPENT CHAR (1),
IN PARAM_CENTD NUMERIC (6, 0),
IN PARAM_CRPRS CHAR (5),
IN PARAM_TRPRS CHAR (30),
IN PARAM_TRUTFR CHAR (50),
IN PARAM_TDRCRD CHAR (50),
IN PARAM_SESTRG CHAR (1),
IN PARAM_CULUSA CHAR (10),
INOUT PARAM_PROCSTATUS INT,
INOUT PARAM_PROCDESC VARCHAR(2000)
)
BEGIN
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE VAL INTEGER DEFAULT 0;
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);
-- VALIDACIONES

IF IFNULL(PARAM_CCMPN,'')='' OR   
   IFNULL(PARAM_STPENT,'')='' OR
   IFNULL(PARAM_CENTD,0)=0 OR
   IFNULL(PARAM_CRPRS,'')='' OR
   IFNULL(PARAM_TRPRS,'')='' OR
   IFNULL(PARAM_TRUTFR,'')='' OR
   IFNULL(PARAM_TDRCRD,'')='' OR
   IFNULL(PARAM_SESTRG,'')='' OR
   IFNULL(PARAM_CULUSA,'')=''
   THEN
   SET VAL=VAL+1;
   SET PARAM_PROCDESC= PARAM_PROCDESC || 'Los parámetros deben de tener algún valor,';
END IF;

IF PARAM_CCMPN<>'AM' AND PARAM_CCMPN<>'LZ' THEN
	SET VAL=VAL+1;
	SET PARAM_PROCDESC= PARAM_PROCDESC || 'Datos de compañía no válidos,';

END IF;

IF PARAM_STPENT<>'A' AND PARAM_STPENT<>'B' AND PARAM_STPENT<>'C' THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Tipo de entidad no válido,';
END IF;

IF PARAM_SESTRG<>'A'  THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Estado no válido,';
END IF;

IF PARAM_CULUSA<>'WEBCASA' AND PARAM_CULUSA<>'WEBALMA' THEN
        SET VAL=VAL+1;
                SET PARAM_PROCDESC= PARAM_PROCDESC || 'Usuario de acceso no válido,';
END IF;

IF VAL=0 THEN


                IF PARAM_CCMPN='LZ' THEN
                
					IF EXISTS (SELECT * FROM DC@RNSLIB.ZZWT88 WHERE STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS ) THEN
					
								UPDATE DC@RNSLIB.ZZWT88 SET
                                TRPRS=PARAM_TRPRS,TRUTFR=PARAM_TRUTFR,TDRCRD=PARAM_TDRCRD,SESTRG=PARAM_SESTRG,FULTAC=DC@RNSLIB.FECHA(),HULTAC=DC@RNSLIB.HORA(),CULUSA = PARAM_CULUSA
                                WHERE STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND  CRPRS=PARAM_CRPRS;
                                SET PARAM_PROCSTATUS=0;
                                SET PARAM_PROCDESC='Registro modificado';					
					
					ELSE
								SET PARAM_PROCSTATUS=1;
                                SET PARAM_PROCDESC='El registro no existe';
					END IF;
				
                ELSEIF PARAM_CCMPN='AM' THEN

					IF EXISTS (SELECT * FROM DC@ALMAPER.ZZWT88 WHERE STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND CRPRS=PARAM_CRPRS ) THEN
					
								UPDATE DC@ALMAPER.ZZWT88 SET
                                TRPRS=PARAM_TRPRS,TRUTFR=PARAM_TRUTFR,TDRCRD=PARAM_TDRCRD,SESTRG=PARAM_SESTRG,FULTAC=DC@RNSLIB.FECHA(),HULTAC=DC@RNSLIB.HORA(),CULUSA = PARAM_CULUSA
                                WHERE STPENT=PARAM_STPENT AND CENTD=PARAM_CENTD AND  CRPRS=PARAM_CRPRS;
                                SET PARAM_PROCSTATUS=0;
                                SET PARAM_PROCDESC='Registro modificado';					
					
					ELSE
								SET PARAM_PROCSTATUS=1;
                                SET PARAM_PROCDESC='El registro no existe';
					END IF;

                ELSE
                                SET PARAM_PROCSTATUS=1;
                                SET PARAM_PROCDESC='Error en el esquema';
                END IF;

ELSE
                SET PARAM_PROCSTATUS=1;
                SET PARAM_PROCDESC='Errores de validación,' || PARAM_PROCDESC;
END IF;


	SET pParametros=
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_STPENT : ' CONCAT PARAM_STPENT  CONCAT ' | ' CONCAT
					'PARAM_CENTD : ' CONCAT CAST(PARAM_CENTD  AS VARCHAR(2000)) CONCAT ' | ' CONCAT
					'PARAM_CRPRS : ' CONCAT PARAM_CRPRS  CONCAT ' | ' CONCAT
					'PARAM_TRPRS : ' CONCAT PARAM_TRPRS  CONCAT ' | ' CONCAT
					'PARAM_TRUTFR : ' CONCAT PARAM_TRUTFR  CONCAT ' | ' CONCAT
					'PARAM_TDRCRD : ' CONCAT PARAM_TDRCRD  CONCAT ' | ' CONCAT
					'PARAM_SESTRG : ' CONCAT PARAM_SESTRG  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA				
					;
	SET pRespuesta=IFNULL(CAST(PARAM_PROCSTATUS AS VARCHAR(100)) CONCAT ' | ' CONCAT IFNULL(PARAM_PROCDESC,'Sin mensaje'),'Error');
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_ACTUALIZA_REPRESENTANTE',
	pParametros,
	pRespuesta
	);

END
GO
--***************************************************************************************************
--4.2.1   REQFE001 – Generador numerador
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_GENERARNUMERADOR(
IN PARAM_CCMPN CHAR(2),
IN PARAM_CTPCTR CHAR(6),
IN PARAM_CULUSA CHAR(10)
)
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE NUM NUMERIC(10,0);
DECLARE MENSAJE varchar(100);
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR CURSOR FOR
SELECT NUM AS NUMERADOR,MENSAJE AS TIPO FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
        -- OBTENIENDO EL NUMERADOR ACTUAL
        SET NUM = (SELECT NULCTR FROM DC@RNSLIB.RZZM04 WHERE CTPCTR=PARAM_CTPCTR FETCH FIRST 1 ROWS ONLY);
        
        IF IFNULL(NUM,0)<>0 THEN        
	        UPDATE DC@RNSLIB.RZZM04 SET NULCTR=NULCTR+1,CULUSA=PARAM_CULUSA,FULTAC=DC@RNSLIB.FECHA(),HULTAC=DC@RNSLIB.HORA() WHERE CTPCTR=PARAM_CTPCTR AND NULCTR=NUM;
	        -- OBTENIENDO EL ULTIMO NUMERADOR
	        SET NUM = (SELECT NULCTR FROM DC@RNSLIB.RZZM04 WHERE CTPCTR=PARAM_CTPCTR FETCH FIRST 1 ROWS ONLY);
	        SET MENSAJE=PARAM_CTPCTR;
		ELSE
			SET NUM=0;
			SET MENSAJE='Tipo de control no existe';
		END IF;
ELSEIF PARAM_CCMPN='AM' THEN
        -- OBTENIENDO EL NUMERADOR ACTUAL
        SET NUM = (SELECT NULCTR FROM DC@ALMAPER.RZZM04 WHERE CTPCTR=PARAM_CTPCTR FETCH FIRST 1 ROWS ONLY);
        
        IF IFNULL(NUM,0)<>0 THEN        
	        UPDATE DC@ALMAPER.RZZM04 SET NULCTR=NULCTR+1,CULUSA=PARAM_CULUSA,FULTAC=DC@RNSLIB.FECHA(),HULTAC=DC@RNSLIB.HORA() WHERE CTPCTR=PARAM_CTPCTR AND NULCTR=NUM;
	        -- OBTENIENDO EL ULTIMO NUMERADOR
	        SET NUM = (SELECT NULCTR FROM DC@ALMAPER.RZZM04 WHERE CTPCTR=PARAM_CTPCTR FETCH FIRST 1 ROWS ONLY);
	    ELSE
	    	SET NUM=0;
			SET MENSAJE='Tipo de control no existe';
	    END IF;
ELSE
        SET NUM = 0;  
        SET MENSAJE='Tipo de control no existe';
END IF;

OPEN CR;

	SET pParametros=
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN  CONCAT ' | ' CONCAT
					'PARAM_CTPCTR : ' CONCAT PARAM_CTPCTR  CONCAT ' | ' CONCAT
					'PARAM_CULUSA : ' CONCAT PARAM_CULUSA
					;
	SET pRespuesta=MENSAJE;
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_GENERARNUMERADOR',
	pParametros,
	pRespuesta
	);

END
GO

--PRUEBA
--CALL SP_INTSGO_GEN_GENERARNUMERADOR('ACE','AM','WEBPORTAL','WEBUSER')
-- ***************************************************************************************************
-- 4.2.2   REQFE002 –  Listado de Compañías
--CALL INTEGRASGO.SP_INTSGO_GEN_LISTADO_COMPANIA()

CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_COMPANIA()
RESULT SETS 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CCMPN,TCMPCM,TABRCM,SESTRG FROM DC@RNSLIB.RZIK16;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_COMPANIA',
	'',
	''
	);

END
GO
-- PRUEBA
--CALL INTEGRASGO.SP_INTSGO_GEN_LISTADO_COMPANIA()
-- ***************************************************************************************************
--4.2.3   REQFE003 – Listado de División

CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_DIVISION()
RESULT SETS 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CCMPN,CDVSN,TCMPDV,TABRDV,SESTRG FROM DC@RNSLIB.RZIK17;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_DIVISION',
	'',
	''
	);

END
GO
--CALL 

-- PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_DIVISION()
-- ***************************************************************************************************
--4.1.1   REQFE004 – Listado de Plantas
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_PLANTA()
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CCMPN,CDVSN,CPLNDV,SESTRG FROM DC@RNSLIB.RZIK19;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_PLANTA',
	'',
	''
	);

END
GO

-- PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_PLANTA()

-- ***************************************************************************************************
--4.1.1   REQFE005 – Listado de Clientes
DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_CLIENTE
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_CLIENTE(
PARAM_CCMPN CHAR(2)
)
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR1 CURSOR FOR
SELECT A1.CCLNT, A1.NRUC,A1.TCMPCL,A1.TABRCL,A1.TDRCOR,A1.SESTRG FROM  DC@RNSLIB.RZZM01 A1 INNER JOIN DC@RNSLIB.ZZWM18 A2 ON A2.CCLNT=A1.CCLNT;

DECLARE CR2 CURSOR FOR
SELECT A1.CCLNT, A1.NRUC,A1.TCMPCL,A1.TABRCL,A1.TDRCOR,A1.SESTRG FROM  DC@ALMAPER.RZZM01 A1 INNER JOIN DC@ALMAPER.ZZWM18 A2 ON A2.CCLNT=A1.CCLNT;

DECLARE CR3 CURSOR FOR
SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
OPEN CR1;
ELSEIF PARAM_CCMPN='AM' THEN
OPEN CR2;
ELSE
OPEN CR3;
END IF;

	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_CLIENTE',
	pParametros,
	''
	);


END
GO

--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_CLIENTE('LZ')

-- ***************************************************************************************************
--4.2.6   REQFE006 – Listado Tipo de Operación
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_TIPOOPERACION
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_TIPOOPERACION()
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CTOPRC,TTOPRC,TABTPO,SESTRG FROM DC@RNSLIB.ZZWM05;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_TIPOOPERACION',
	'',
	''
	);

END
GO
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_TIPOOPERACION()
-- ***************************************************************************************************
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_TIPOALMACEN
--4.2.7   REQFE007 – Listado Tipo de Almacén
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_TIPOALMACEN()
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CTPOAL,TALMC,AALMC,SESTRG  FROM DC@RNSLIB.ZZWM16;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_TIPOALMACEN',
	'',
	''
	);

END
GO
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_TIPOALMACEN()
-- ***************************************************************************************************
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_FINANCIADOR
--4.2.8   REQFE008 – Listado Financiadores
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_FINANCIADOR(
PARAM_CCMPN CHAR(2)
)
RESULT SET 1
LANGUAGE SQL
BEGIN
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR1 CURSOR FOR
SELECT CBNCFN,TCMBCF,TABBCF,TDRBCF,SESTRG FROM DC@RNSLIB.RZIK10;

DECLARE CR2 CURSOR FOR
SELECT CBNCFN,TCMBCF,TABBCF,TDRBCF,SESTRG FROM DC@ALMAPER.RZIK10;

DECLARE CR3 CURSOR FOR
SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
OPEN CR1;
ELSEIF PARAM_CCMPN='AM' THEN
OPEN CR2;
ELSE
OPEN CR3;
END IF;

	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_FINANCIADOR',
	pParametros,
	''
	);

END
GO

--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_FINANCIADOR('AM')
-- ***************************************************************************************************
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_ALMACEN
--4.2.9   REQFE009  – Listado Almacenes
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_ALMACEN(
PARAM_CCMPN CHAR(2)
)
RESULT SET 1
LANGUAGE SQL
BEGIN
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR1 CURSOR FOR
SELECT CTPOAL,CALMCM, CUABLC,TDRALC,TDRAL1,SESTRG FROM DC@RNSLIB.RZZM23;

DECLARE CR2 CURSOR FOR
SELECT CTPOAL,CALMCM, CUABLC,TDRALC,TDRAL1,SESTRG FROM DC@ALMAPER.RZZM23;

DECLARE CR3 CURSOR FOR
SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
OPEN CR1;
ELSEIF PARAM_CCMPN='AM' THEN
OPEN CR2;
ELSE
OPEN CR3;
END IF;

	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_ALMACEN',
	pParametros,
	''
	);

END
GO

--4.2.9   REQFE009  – Listado Almacenes : ALMACENES POR CLIENTE
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_ALMACEN_CLIENTE
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_ALMACEN_CLIENTE
(
	IN PARAM_CCMPN CHAR(2)
	--IN PARAM_CCLNT NUMERIC(6,0)
)
RESULT SET 1
LANGUAGE SQL
BEGIN
	DECLARE pParametros varchar(2000);
	DECLARE pRespuesta varchar(100);

	DECLARE CR1 CURSOR FOR
		SELECT CCLNT, CTPOAL, CALMCM FROM DC@RNSLIB.ZZWM16 WHERE SESTRG='A';
	
	DECLARE CR2 CURSOR FOR
		SELECT CCLNT, CTPOAL, CALMCM FROM DC@ALMAPER.ZZWM16 WHERE SESTRG='A';
	
	DECLARE CR3 CURSOR FOR
		SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

	IF PARAM_CCMPN='LZ' THEN
		OPEN CR1;
	ELSEIF PARAM_CCMPN='AM' THEN
		OPEN CR2;
	ELSE
		OPEN CR3;
	END IF;	
	
	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN CONCAT ' | ' CONCAT
					'PARAM_CCLNT : ' CONCAT CAST(PARAM_CCLNT  AS VARCHAR(2000))
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_ALMACEN_CLIENTE',
	pParametros,
	''
	);

END
GO
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_ALMACEN('AM')

-- ***************************************************************************************
--4.2.10  REQFE010 – Listado Moneda
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_MONEDA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_MONEDA()
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CMNDA1,TMNDA,SESTRG FROM DC@RNSLIB.RZZK02;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_MONEDA',
	'',
	''
	);

END
GO

--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_MONEDA()

-- **************************************************************************************
--4.2.11  REQFE011 – Listado Régimen
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_REGIMEN
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_REGIMEN()
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CRGMN,TCMPRG,TABRRG,SESTRG FROM DC@RNSLIB.ZZWM14;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_REGIMEN',
	'',
	''
	);

END
GO
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_REGIMEN()

-- **************************************************************************************
--4.2.12  REQFE012 – Listado Aduanas
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_ADUANAS
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_ADUANAS(
PARAM_CCMPN CHAR(2)
)
RESULT SET 1
LANGUAGE SQL
BEGIN
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR1 CURSOR FOR
SELECT CADNA,TCMADN,TABADN,SESTRG FROM  DC@RNSLIB.ZZWM10;

DECLARE CR2 CURSOR FOR
SELECT CADNA,TCMADN,TABADN,SESTRG FROM  DC@ALMAPER.ZZWM10;

DECLARE CR3 CURSOR FOR
SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
OPEN CR1;
ELSEIF PARAM_CCMPN='AM' THEN
OPEN CR2;
ELSE
OPEN CR3;
END IF;

	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_ADUANAS',
	pParametros,
	''
	);

END
GO
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_ADUANAS('AM')

-- ***************************************************************************************
--4.2.13  REQFE013 - Listado Compañías de seguro
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_CIASEGURO
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_CIASEGURO()
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CCMPSG,TCMPSG,TABCMS,TDRCMS,SESTRG FROM  DC@RNSLIB.RZZK04;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_CIASEGURO',
	'',
	''
	);

END
GO

--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_CIASEGURO()
-- ***************************************************************************************
-- 4.2.14  REQFE014 – Listado Ubigeos
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_UBIGEO
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_UBIGEO()
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE CR CURSOR FOR
SELECT CUBGEO,TDSTR,TPRVN,TDPRT,SESTRG FROM DC@RNSLIB.RZZK03;
OPEN CR;

	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_UBIGEO',
	'',
	''
	);

END
GO
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_UBIGEO()
-- ***************************************************************************************

--4.2.15  REQFE015  – Listado Familias
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_FAMILIA
CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_FAMILIA(
PARAM_CCMPN CHAR(2)
)
RESULT SET 1
LANGUAGE SQL
BEGIN
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR1 CURSOR FOR
SELECT CFMLPR,TABFMP,TCMFMP,SESTRG FROM  DC@RNSLIB.ZZWM01;

DECLARE CR2 CURSOR FOR
SELECT CFMLPR,TABFMP,TCMFMP,SESTRG FROM  DC@ALMAPER.ZZWM01;

DECLARE CR3 CURSOR FOR
SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
OPEN CR1;
ELSEIF PARAM_CCMPN='AM' THEN
OPEN CR2;
ELSE
OPEN CR3;
END IF;

	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_FAMILIA',
	pParametros,
	''
	);

END
GO
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_FAMILIA('AM')
-- ***************************************************************************************
--4.2.16  REQFE016  – Listado Productos
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_PRODUCTO

CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_PRODUCTO(
PARAM_CCMPN CHAR(2)
)
RESULT SET 1
LANGUAGE SQL
BEGIN

DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR1 CURSOR FOR
SELECT CFMLPR,CDPRDC,TABPRD,TCMPRD,CUNDMD,SESTRG FROM  DC@RNSLIB.ZZWM02;

DECLARE CR2 CURSOR FOR
SELECT CFMLPR,CDPRDC,TABPRD,TCMPRD,CUNDMD,SESTRG FROM  DC@ALMAPER.ZZWM02;

DECLARE CR3 CURSOR FOR
SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
OPEN CR1;
ELSEIF PARAM_CCMPN='AM' THEN
OPEN CR2;
ELSE
OPEN CR3;
END IF;

	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_PRODUCTO',
	pParametros,
	''
	);

END
GO

--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_PRODUCTO('AM')

--*********************************************************************************
--4.2.17  REQFE017  – Listado Unidades de medida
--CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_PRODUCTO(
--PARAM_CCMPN CHAR(2)
--)
--RESULT SET 1
--LANGUAGE SQL
--BEGIN

--DECLARE CR1 CURSOR FOR
--SELECT CFMLPR,CDPRDC,TABPRD,TCMPRD,CUNDMD,SESTRG FROM  DC@RNSLIB.ZZWM02;

--DECLARE CR2 CURSOR FOR
--SELECT CFMLPR,CDPRDC,TABPRD,TCMPRD,CUNDMD,SESTRG FROM  DC@ALMAPER.ZZWM02;

--DECLARE CR3 CURSOR FOR
--SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

--IF PARAM_CCMPN='LZ' THEN
--OPEN CR1;
--ELSEIF PARAM_CCMPN='AM' THEN
--OPEN CR2;
--ELSE
--OPEN CR3;
--END IF;

--END
--PRUEBA
--CALL SP_INTSGO_GEN_LISTADO_PRODUCTO('LZ')
--*********************************************************************************

--4.2.17  REQFE017  – Listado Unidades de medida
--DROP PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_UNIDADMEDIDA

CREATE PROCEDURE INTEGRASGO.SP_INTSGO_GEN_LISTADO_UNIDADMEDIDA(
PARAM_CCMPN CHAR(2)
)
RESULT SET 1
LANGUAGE SQL
BEGIN
DECLARE pParametros varchar(2000);
DECLARE pRespuesta varchar(100);

DECLARE CR1 CURSOR FOR
SELECT CUNDMD,TCMPUN,TABRUN,STPOUN,SESTRG FROM  DC@RNSLIB.RZZM03;

DECLARE CR2 CURSOR FOR
SELECT CUNDMD,TCMPUN,TABRUN,STPOUN,SESTRG FROM  DC@ALMAPER.RZZM03;

DECLARE CR3 CURSOR FOR
SELECT '' RESULT  FROM SYSIBM.SYSDUMMY1;

IF PARAM_CCMPN='LZ' THEN
OPEN CR1;
ELSEIF PARAM_CCMPN='AM' THEN
OPEN CR2;
ELSE
OPEN CR3;
END IF;

	SET pParametros=					
					'PARAM_CCMPN : ' CONCAT PARAM_CCMPN
					;
	SET pRespuesta='0';
	
	CALL INTEGRASGO.SP_INTSGO_GEN_ILOG('INTEGRASGO.SP_INTSGO_GEN_LISTADO_UNIDADMEDIDA',
	pParametros,
	''
	);

END

--PRUEBA
--CALL INTEGRASGO.SP_INTSGO_GEN_LISTADO_UNIDADMEDIDA('AM')
--*********************************************************************************


